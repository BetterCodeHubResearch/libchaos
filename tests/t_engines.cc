#include "gtest/gtest.h"

#include <iomanip>
#include <iostream>
#include <sstream>
#include <string>
#include <vector>

#include <chaos.h>

////////////////////////////////////////////////////////////////////////////////

#define T_MACHINE(x, cerf__0, cerf__1)                                         \
	TEST(ENGINES, T__##x##__SignatureDefault) {                                  \
		x machine_##x;                                                             \
                                                                               \
		std::ostringstream sign;                                                   \
		sign << std::hex << std::uppercase << std::setfill('0');                   \
		std::vector<x::size_pull> v(128, 0);                                       \
                                                                               \
		std::generate(v.begin(), v.end(),                                          \
		              [&machine_##x] { return machine_##x.pull(); });              \
                                                                               \
		for (int block : v)                                                        \
			sign << std::setw(2) << block;                                           \
                                                                               \
		EXPECT_EQ(cerf__0, sign.str());                                            \
	}                                                                            \
                                                                               \
	TEST(ENGINES, T__##x##__SignatureAdvanced) {                                 \
		x machine_##x;                                                             \
                                                                               \
		std::vector<x::size_cell> __secret_key = {0xAA, 0xBB, 0xCC};               \
		size_t __space_parameter = 33, __time_parameter = 11;                      \
		std::vector<x::size_push> __message = {0x11, 0x22, 0x33, 0x44, 0x55,       \
		                                       0x66, 0x77, 0x88, 0x99};            \
                                                                               \
		machine_##x.set_key(__secret_key);                                         \
		machine_##x.set_space(__space_parameter);                                  \
		machine_##x.set_time(__time_parameter);                                    \
                                                                               \
		for (size_t i = 0; i < __message.size(); i++)                              \
			machine_##x.push(__message[i]);                                          \
                                                                               \
		std::ostringstream sign;                                                   \
		sign << std::hex << std::uppercase << std::setfill('0');                   \
		std::vector<x::size_pull> v(128, 0);                                       \
                                                                               \
		std::generate(v.begin(), v.end(),                                          \
		              [&machine_##x] { return machine_##x.pull(); });              \
                                                                               \
		for (int block : v)                                                        \
			sign << std::setw(2) << block;                                           \
                                                                               \
		EXPECT_EQ(cerf__1, sign.str());                                            \
                                                                               \
		sign.str("");                                                              \
		sign.clear();                                                              \
                                                                               \
		machine_##x.reset();                                                       \
                                                                               \
		for (size_t i = 0; i < __message.size(); i++)                              \
			machine_##x.push(__message[i]);                                          \
                                                                               \
		std::generate(v.begin(), v.end(),                                          \
		              [&machine_##x] { return machine_##x.pull(); });              \
                                                                               \
		for (int block : v)                                                        \
			sign << std::setw(2) << block;                                           \
                                                                               \
		EXPECT_EQ(cerf__1, sign.str());                                            \
	}

/// ncg ////////////////////////////////////////////////////////////////////////

std::string ncg__cerf__0 =
    "4CCFB24A4E3CE29B6A60367EFC3610C4B93790D2A44D07B4E2B8802E63B8D633BA5FDD63BF"
    "3B13123DD25330BFCEB17A7261BCF68FB95FE54A7A7932A05F6A55F29137559754D9967126"
    "87113A82981B02855374B54292A54FF89E133249E0165CB815E851A27B2EE82F7E2B067E9E"
    "2BD46C9A73B792587280F7217D2D28153C46619FBE0575541F4471A71E7DF9AEF17DF087D4"
    "4472F318E48D4FC59CE957B65189E6DC00DE601B30B0899F1E9E2B789EDC1BA8DB4133EA61"
    "B12E51BD4ECB468FABEB3AA3CB9AD3927C5A831115E47C3F96388E8ADFC137A269A135FB47"
    "12C03991A06099B72DF1CBDA44D4B357ADB227F2279B4CC9C8B4D04E73993CD75A75BF3C10"
    "5375DFB25DF971995287EE44A800CBBDA67B81D345C784B001C4A325F81A7128568C100677"
    "68ACAD74C94C13AFFB23423F46ADDF4C9A9DA73B9AC481A8D237A924C58E053644CF4A29A0"
    "3D7B142A85C0ECD3DFFF39DE849161A0CF528A807320C4728F9303720767743921A799E778"
    "39F3D6E074F44B9CB26EC4A7D03FB6C4DC71C5FDD6E42327AEBBA3D3024CAAB0A4E28D4245"
    "4BDC36DBB739605ED2B3F48FDDDDB743D60504BE8F30228057860C37D42D8FED962D1D717A"
    "FCD5846F0E5C7A1CB8EF76D91D976B72B093A60F7FA6D46D71434D8F2A5C5D617EAB9D3B79"
    "4A99617C3998F3B2B2DEFDDE9352D19527B25860BA66CA43A4176";

std::string ncg__cerf__1 =
    "1026301DF424E9AEEBAFDED62F68E02C3EF470F8F79D6AD2787111ECC54578BB84893B2ADA"
    "2D4D4275756DA7E69F4A878FCAF0A8E211A0AA819E6C3FC4D953ED7462CE7C2B1A29061AF9"
    "E7F6323F7CE7D24719F63D2095445EB1B9C42A7E65AAA03BEADBC635DAEAEAA2C6192025AB"
    "B725F7E53C8C7308C0D20C2A17C26D62469A96000E8262A5A0E2218EDDF89341FD4448999F"
    "197E3EB18C96BB643175A46F320C2F608F655D9FAD86E2A85FD2B3FD9330E0BD5FE655ED3A"
    "685D5DC32C9D438CF519706ECC42AFA309413871B257D5D46E70788268BC0A71C00ED3725E"
    "C20A6C9E67A52E9B51B223EE2EA3C3BB8F6F05E32F89339D419254BC0A65047797233BCB1D"
    "4A03D6CB1758EFC16602E648136775F1E6F62CED69F83CDD9888AEF55334C1AEBB3FBED761"
    "88320FDB0EFBFC2591BB619080E3F826738D22195733EE21DD4925FB7268F2EE7F6948D7AD"
    "B0949FDDDBF78D47C21C6E6C7D3D87BF0238DDEB099E8B84F36F1325526CCECB399F3122E8"
    "C51ACC51CABB3A64FA8E1089394CED61DD5A0C9CE216D7AD4F54066529D6469FA308D522C2"
    "036822BB9E228B8AA2CC4681BF2C517F736D8D84700FB50D73F15658745DE2D4CC27AA44DF"
    "07BA57B61D42681E4C51A92ACA9E9E44882A925AA6C5D3C8793668009384CD230727F49D6B"
    "84C00698BCC8BEF58694430B07F91E429E754C4128E53BB5C62A2F9";

T_MACHINE(CHAOS_MACHINE_NCG, ncg__cerf__0, ncg__cerf__1)

/// xorring ////////////////////////////////////////////////////////////////////

std::string xorring32__cerf__0 =
    "80A6FDC85540024088964C26AC91991A4E8249A8C67AE8A0BA20C2402BAE2D8058B49FFED2"
    "3B904CEA2FA8295BA7DC488D9E4329AF700194B4EFF1C34806D587810E55C8AA6B90B0CF2B"
    "8BCCE55E8B585555F80FDA375D20121B4E7452DE0F4B3CDA9FE6B9593182C8C8296536DEDA"
    "2F493B248F4DE1E846F42431DC749C742C491EBB41956EEA09507C9DA108A332E801AFC7E9"
    "3E497ECC20FA87918003174736F938483C8399C34B9326CC4A82384B58C027CDC5EA8FF598"
    "EB228D8B80AF819FE082073E4039AF18049FCD7C3AD61C273548845D9B39CB8B05B004CE37"
    "7B337D0A8291B8F513814094DF01A3B39F4FA4B6F98C941B42841193241FEC59504BAD5483"
    "0F61CA2186EC49014D898652482C3283322811E2155460881B1A52B61C3B13B5A812FA58BD"
    "893730D598BC22A6ED5A51A8BE6DAA786685D4D6A4AD822141B379B4E4F7560ADDC44BFC2C"
    "DB6BB1EC38C2BBADC4DA9C77E14C04A3DC279B12130A78D57646AA6F0F49A01A168A20FF83"
    "4438C5ED1787016099EFE29A5115E0906CDC161BF79C7BF65693F3EF8BAC49A559DF8F71E9"
    "91E812E49179EDD4F949FE0DBC8CEEF0D1CCF644D5EE820A290CD28F6FDA4366F278BF864A"
    "3B1BC44D85635765E8566F96F919D15C45B94EE8494A987F5A083A8C19440B2B277C15DAA9"
    "C46E423E9D5C83DFF2CD09D353820DC86FB161DAB421FA3BC7849B6";

std::string xorring32__cerf__1 =
    "9DAF13EA4FDA4921AFADC6B0E877B146448542ED2C1DFF978D9324922A5B9F884792224A62"
    "F3766AB297A15F267D79F6C93223E06F206A14A92D734077DB0BB06545446215544E8EA796"
    "6DF2A11BCA4571ECF532BE108D051F7191645D418AA86EBEC7534AC63C40EF15EF067707A8"
    "929F7739C5543AC7C733872AC88ACF0E0D431535C2949C01C12F9A77D1C9CF3989EE3851D6"
    "30AB30C8B0B099A4E050FC4709B4D0994368980E1585370AFB2786083A094F8407F68449FB"
    "A21628B7FCD40766C246A989D058E3A1373023891530DA39FBF218F52FF8630EF000F15737"
    "DC2831D78AA2C78E28EDDD2F34C91DDBA48F1B4FA0B012D1F19DB3FF5483AB33A0B3C3DF7E"
    "8DB1EF6C5B33238E7635CE1FC4749328C04A7BD269DFA62CB1041CB4DC8F066CBBF1AD28BC"
    "1FC424DEF95938B3558610895F21C041D34DCECA06F656A02F27BA665D51A5F9819888CB5E"
    "50D3DD0BE41CC64AA54F228438AB8C04085970757C8350E532A0A7FC6C6D40276559793357"
    "D1759D8B8C6AA1C42E9BDB6CE02283D5879FFB8AF25C5D4E15D0EE8B834BF9DD741AADAF23"
    "F715017E84308A3AE319D2F157F34BE32C3A7D0633564C2A4EBD5CCAB16E1609A0CA3D87F7"
    "A8F3F9DCBFDF75D6C09DAB9225CBB046958C75188850C3064E9E3478406DCD63936FF4C3AC"
    "ED645D63791412B789FEE64D8D44CD202FD208DF50877EA78650";

T_MACHINE(CHAOS_MACHINE_XORRING32, xorring32__cerf__0, xorring32__cerf__1)

std::string xorring64__cerf__0 =
    "3C3C15606A2EC6503B42F72C6CEB74A5B0AFE071A0A3129A7A93EE630E229FEC8D13EA5989"
    "C7CEDF2BAE83F5ECC06CB96C8A21BD0186446C4548B993E6077F539790F6D893807DC2BA8E"
    "3F058C1687A369408EB8D4A1DAF0A7501BC0D456E9DE87313838853483A814389218CE8CD6"
    "2F5B63D62EB2B13F524C80DEFBC948C27E15763DD0C6D828FE0CDE7C3E19E0F38BE9DE835A"
    "40AA2DED170A0885C20F12322BC22E47A2E14E801FD536360DC464A9BE6CBDF436448819D0"
    "82670BD6C8788568292484A327C9A914A6F5534FCABE3C883E086E0D284B152866B61B336A"
    "A729052D4F69AD26E11518E5C1AB30B47BA89344A664B226F0548C0839244095418FAB07DC"
    "048FDE99A92A037F3461834F3AF7BB3F5CD781B391FD8152246A8BF03F6D8A97ABE487B80E"
    "49477206015248100849C738DEF2F2E40B27F29F489E28AF0E2E07532A37BBD00366AE21CD"
    "9AAEF367B36ACA3282AAE802538789118233DB0BB58C59D213495CD1C90992074BE1956468"
    "67F0475C40A28792ECE30ACCD68DC65FB5396428BF058DF0C1E7BFB10367C37E005B14D245"
    "21328BC1F447007800F8291CDF544181224B5115CBCC3959F34B354C45EC22F99AEDA42871"
    "EF2D47CCA467D7EDC3AB8DCF1DAEFB6A26B76B9746229144EEE28CBC8A69624089EF99FF47"
    "2CEC9951A871B42D767B10AA639E54E458CBBE6C06FDDF529A05088";

std::string xorring64__cerf__1 =
    "5F2F8D924AB9269DBDAE44C666EEA9005598EB482B266C3C78E8DB04D425BD542F0F47CA80"
    "0AE443108F5FA0C06E493A920E0FF4F26698DC5679D77812BF87985DA730D7EDF19E1CDD90"
    "74DF447B9F80407B87C0539B8A68E591018B1338F4C0CD140F5EEDA36DAED34D93F05070F9"
    "8A92398964C53485908A506BEFD11B5C0060271D59C7F3291E4752C441DAFAC9EF32EC8AAE"
    "A19A77880F67396E0646E033B68923C4FD632D89382DD81DF9C7FCC18491BA34F4427A5047"
    "A478F205F2E03B38F225DFB7A951BBDDDAA2F23D39B237C7C83B4DF6C6BB807B25C6E9D433"
    "703FE68D7F9BDA14302C591F6C43B84618686E45A1FB3E9D70EB9E5EB95DF99888A771F5F6"
    "1520D588D290035EEFA6D56E6DB0A39ADC6D4F90BCAD3783206BE04076F5D120D9355BC91B"
    "FECE8B9E9B9EAE2BCED3B88DC0F388795E7ACBCDC6004D7111CD8CD1F7D2F2627E592213A8"
    "0838938E6C8143B475936DB796307963F049C9EAF53C42D301C062F7E5BA6098776DFC1803"
    "46B88EBE889B7405EA566DFDAD90A7D4454846554B033650B409E6E4A11CA7904E777D1CA8"
    "5165E7B471920D4C32FEA197106A3816066E2C61EA658651498DDEF25902A505149B4B3EEC"
    "E8A3BA8585340B7F45623A982BAE2CE8E82C0CA89D48908584C8739384512CC28A82151A06"
    "D9C49272CD25A6035DE567CA2B873D495AFE880114CC86C5F4E9168";

T_MACHINE(CHAOS_MACHINE_XORRING64, xorring64__cerf__0, xorring64__cerf__1)

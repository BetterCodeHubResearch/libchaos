#include "gtest/gtest.h"

#include <iomanip>
#include <iostream>
#include <sstream>
#include <string>
#include <vector>

#include <chaos.h>

////////////////////////////////////////////////////////////////////////////////

#define T_MACHINE(x, cerf__0, cerf__1)                                         \
	TEST(ENGINES, T__##x##__SignatureDefault) {                                  \
		x machine_##x;                                                             \
                                                                               \
		std::ostringstream sign;                                                   \
		sign << std::hex << std::uppercase << std::setfill('0');                   \
		std::vector<x::size_pull> v(128, 0);                                       \
                                                                               \
		std::generate(v.begin(), v.end(),                                          \
		              [&machine_##x] { return machine_##x.pull(); });              \
                                                                               \
		for (int block : v)                                                        \
			sign << std::setw(2) << block;                                           \
                                                                               \
		EXPECT_EQ(cerf__0, sign.str());                                            \
	}                                                                            \
                                                                               \
	TEST(ENGINES, T__##x##__SignatureAdvanced) {                                 \
		x machine_##x;                                                             \
                                                                               \
		std::vector<x::size_cell> __secret_key = {0xAA, 0xBB, 0xCC};               \
		size_t __space_parameter = 33, __time_parameter = 11;                      \
		std::vector<x::size_push> __message = {0x11, 0x22, 0x33, 0x44, 0x55,       \
		                                       0x66, 0x77, 0x88, 0x99};            \
                                                                               \
		machine_##x.set_key(__secret_key);                                         \
		machine_##x.set_space(__space_parameter);                                  \
		machine_##x.set_time(__time_parameter);                                    \
                                                                               \
		for (size_t i = 0; i < __message.size(); i++)                              \
			machine_##x.push(__message[i]);                                          \
                                                                               \
		std::ostringstream sign;                                                   \
		sign << std::hex << std::uppercase << std::setfill('0');                   \
		std::vector<x::size_pull> v(128, 0);                                       \
                                                                               \
		std::generate(v.begin(), v.end(),                                          \
		              [&machine_##x] { return machine_##x.pull(); });              \
                                                                               \
		for (int block : v)                                                        \
			sign << std::setw(2) << block;                                           \
                                                                               \
		EXPECT_EQ(cerf__1, sign.str());                                            \
                                                                               \
		sign.str("");                                                              \
		sign.clear();                                                              \
                                                                               \
		machine_##x.reset();                                                       \
                                                                               \
		for (size_t i = 0; i < __message.size(); i++)                              \
			machine_##x.push(__message[i]);                                          \
                                                                               \
		std::generate(v.begin(), v.end(),                                          \
		              [&machine_##x] { return machine_##x.pull(); });              \
                                                                               \
		for (int block : v)                                                        \
			sign << std::setw(2) << block;                                           \
                                                                               \
		EXPECT_EQ(cerf__1, sign.str());                                            \
	}

/// ncg ////////////////////////////////////////////////////////////////////////

std::string ncg__cerf__0 =
    "2B4FFA3E824729695ECD0F76E23C2FC07618B485102717166710AD92FA562929E08E162DF6"
    "6D32738ED1EFD64C44BD00B451BA1937903481A7897D05730D24F8280E43EAEACF0BFFF98E"
    "BCE4B5BF36D5433FDD75517B9019C0C016C9589C00D518120DEE93BAF20267531B6B4CC837"
    "C4095947B285D6C9D76AE43FF9C3CA470BDF91058A3DF6642FF30806AA26B9484B830C50D4"
    "E7ACF19DE421211A9A220CAB4EC47E30AA61E18789C8AC04F38FF1D9B88E2CAF0F4DFC6522"
    "E271D414629A5582EC16F67861AED44B05D28BF6454C15F5294C007BD93D2C834F7429E242"
    "6704785609415A51F4545EF43B357E975EF5BCA4DE673D2FB9F8C2ED558FBCFCFB5CA497DA"
    "7DD122BB59ECBC6B59D0E83F46F8A4FB55D495B2886ADB4EA7075ECC2291AE0A685EA14C8D"
    "3FC04C1808207D53B54F54D8A2812762A6E8386ABD53A814D84A8BEE646F23AED736C7D616"
    "46AD062B45FAD5DF981D7718DC831B34B86B04F54BD74753ED0FD624CB2BB75D1D4DFE5988"
    "0BEB660ECABD446E6A0649E9E4216E3927CCC9B421F9F3787C6D49F90C3A02D775CE312379"
    "4D9D3ED68F9D1EB01DB12C1F9808830CB24A9A7A18859A0B667DD1A506342A60AC09D58218"
    "5F37220CEAA1D99009856399F7E15B3C001E1756FA601478DEB2CA62C4520ACB7639BB5F5F"
    "AB2F85E6B43F81372FA1F4BDAF20CFDE51F27133435E24E4D743969";

std::string ncg__cerf__1 =
    "47E7D185E15C5AC0668477E85ED55A4FA6641EA99C7D00F92DDAD19E24E328C9B9EC638DF5"
    "3635590341EBFD3A5AC5BECBE02BD8411F5E6891407A240B4148DE74A26D1D065C037FC9A2"
    "382AA6BFBF8BAE978FAE67C9D997E7B188231E1E2C1BB7190B9DB34234BF970CB890E48FD5"
    "26BA8FE94F8C3374BF07DF9F96025850F361176ACAA1171337B911E713B56F6F52FA51D4E0"
    "91643B7BFDDAB8D32AFC3AAD9825FFD2AAA2698F52E3FC5DFE1F39C5BF6B3A9DAE3AAA8902"
    "499E2199C5BA3C3F97C614FCD50F3D6CCD9F36E9832037D8ABE846D8CCDBF1343C713285E9"
    "CF9546BF9359DD13795AF3AAB1343807D1A64DCC4925C58CC8C5A95567F6B99389AEB912BD"
    "57878E9B3E9AF3E0B90CF41316BE168F82C0B8F9F5FAE54DF8CAEF0AB5F5ACA5908CDC0271"
    "FC88A77DC758F77D1E718BB563864F87697B816D1C825515ADFD364930D5A28C80A714D34A"
    "1C808C1D2421CF7BF122DD90F6951D9A36E39F781A062238F4BC2906D6C0B4569DFB117684"
    "C85A3E7E5ECC749A43956CABA394D5B40E6EEDCBB27BD4AAAA848DA776431B0042BA131D78"
    "EF2DEB14131B3C04548E9045C86FB80890731A80E7ECA75868159F237AED85E1292ABE4CA3"
    "408C5EAF619DD0136B456CB01A9C0A8875EF05B1AEDBB4605CF8AFA79F82BF6D40D45D967E"
    "BDD7D0FD7E4A5F5C8AA1E1FED57B83C377C055B6A36F8D629DBF";

T_MACHINE(CHAOS_MACHINE_NCG, ncg__cerf__0, ncg__cerf__1)

/// xorring ////////////////////////////////////////////////////////////////////

std::string xorring32__cerf__0 =
    "80A6FDC85540024088964C26AC91991A4E8249A8C67AE8A0BA20C2402BAE2D8058B49FFED2"
    "3B904CEA2FA8295BA7DC488D9E4329AF700194B4EFF1C34806D587810E55C8AA6B90B0CF2B"
    "8BCCE55E8B585555F80FDA375D20121B4E7452DE0F4B3CDA9FE6B9593182C8C8296536DEDA"
    "2F493B248F4DE1E846F42431DC749C742C491EBB41956EEA09507C9DA108A332E801AFC7E9"
    "3E497ECC20FA87918003174736F938483C8399C34B9326CC4A82384B58C027CDC5EA8FF598"
    "EB228D8B80AF819FE082073E4039AF18049FCD7C3AD61C273548845D9B39CB8B05B004CE37"
    "7B337D0A8291B8F513814094DF01A3B39F4FA4B6F98C941B42841193241FEC59504BAD5483"
    "0F61CA2186EC49014D898652482C3283322811E2155460881B1A52B61C3B13B5A812FA58BD"
    "893730D598BC22A6ED5A51A8BE6DAA786685D4D6A4AD822141B379B4E4F7560ADDC44BFC2C"
    "DB6BB1EC38C2BBADC4DA9C77E14C04A3DC279B12130A78D57646AA6F0F49A01A168A20FF83"
    "4438C5ED1787016099EFE29A5115E0906CDC161BF79C7BF65693F3EF8BAC49A559DF8F71E9"
    "91E812E49179EDD4F949FE0DBC8CEEF0D1CCF644D5EE820A290CD28F6FDA4366F278BF864A"
    "3B1BC44D85635765E8566F96F919D15C45B94EE8494A987F5A083A8C19440B2B277C15DAA9"
    "C46E423E9D5C83DFF2CD09D353820DC86FB161DAB421FA3BC7849B6";

std::string xorring32__cerf__1 =
    "ECBF649029983AE91ECA215839B6A5C6E7D96DE888589370A3CDA403FE3CC3F245484F7441"
    "C6978EF29D8FF296F8685ED6B20E01E7FC20C5D46C088A21DC03D8267C56306A34E038DA6E"
    "B168322AE6274E7DA6F841E30190A21A46F4F795C75E40D0ADBCB0691E29A67814B190FB42"
    "0E5E266392D9B01AD83A44C7E4873FFC12A78CFFED717E152F9B46B66664388D54EDA20E78"
    "AB609F483D66901E604BB34861B6BCC467A39482C79B32D8DA05ADFF7851A60D59CD27B868"
    "74B9AADF0AF07A3B2BF4278946DBCC944DBE506115BD0A17E73920146CB1208BF194B6E2A2"
    "67FF3BED5D284DD8B3ECF53BFF583660945AD6F9A434DA5E190C5720F57E2EADC29649E9C8"
    "6055B64180E99262E33DFD65948D84BD4F3FE4B44F68F7B87ECEA5E9EE96956034CD36AEE1"
    "5E48C8F327BAB5BE474089E5B6043DEFA161803316B452F258A40032B148C73A68CDC5C445"
    "4B6784F9C9DAF68B0BF85B0578F277E46DD38B3CA66F93F7C591E6E711307DD406879DE3A6"
    "DA0926042602FFE5AE1069AC5AD1D0F2E1859306F1BBC7026BAC195DC4477BAA9B7DF886C4"
    "21802DC5AF8871F69F70972482E09DA9C8ACBAFCFB805DE14BD889FD8BE0AB66AB48A259D8"
    "FE3319815F238E2B19F7A83F363F9331E646EA9EDEF50668B9814E737487C3157930F99497"
    "12E4B62C941AF47FF253C5BCBBC30AEC48400CDD1B43C60BC7BA1";

T_MACHINE(CHAOS_MACHINE_XORRING32, xorring32__cerf__0, xorring32__cerf__1)

std::string xorring64__cerf__0 =
    "3C3C15606A2EC6503B42F72C6CEB74A5B0AFE071A0A3129A7A93EE630E229FEC8D13EA5989"
    "C7CEDF2BAE83F5ECC06CB96C8A21BD0186446C4548B993E6077F539790F6D893807DC2BA8E"
    "3F058C1687A369408EB8D4A1DAF0A7501BC0D456E9DE87313838853483A814389218CE8CD6"
    "2F5B63D62EB2B13F524C80DEFBC948C27E15763DD0C6D828FE0CDE7C3E19E0F38BE9DE835A"
    "40AA2DED170A0885C20F12322BC22E47A2E14E801FD536360DC464A9BE6CBDF436448819D0"
    "82670BD6C8788568292484A327C9A914A6F5534FCABE3C883E086E0D284B152866B61B336A"
    "A729052D4F69AD26E11518E5C1AB30B47BA89344A664B226F0548C0839244095418FAB07DC"
    "048FDE99A92A037F3461834F3AF7BB3F5CD781B391FD8152246A8BF03F6D8A97ABE487B80E"
    "49477206015248100849C738DEF2F2E40B27F29F489E28AF0E2E07532A37BBD00366AE21CD"
    "9AAEF367B36ACA3282AAE802538789118233DB0BB58C59D213495CD1C90992074BE1956468"
    "67F0475C40A28792ECE30ACCD68DC65FB5396428BF058DF0C1E7BFB10367C37E005B14D245"
    "21328BC1F447007800F8291CDF544181224B5115CBCC3959F34B354C45EC22F99AEDA42871"
    "EF2D47CCA467D7EDC3AB8DCF1DAEFB6A26B76B9746229144EEE28CBC8A69624089EF99FF47"
    "2CEC9951A871B42D767B10AA639E54E458CBBE6C06FDDF529A05088";

std::string xorring64__cerf__1 =
    "61AF0C38D90AA075C1AE02D4433E815D6CC5E8EC576737AFF30B772380F4DDC090AE2B2384"
    "89D0B239618D705AB26AE6EC8C2C3A15EC7C4E5AD9108AF052A1F0B2DF9DAE7C97F428B012"
    "2790B70082218E3E59689E3DAE98646866A56DA01FC547CEBCD762CAECC716F3032730E97A"
    "A05398EC31482FB93897B9261DDDC0F208F9D7172260DC94FCCB78DE68F3ABAC4017936868"
    "7D4A0FC0C0E6F6E86B19D7A010076CA3350A1F3A35B10B062EFEE6EB1CA7D6B0C2E40E48F0"
    "40EFA112C72A237D9F59065D043A6FC0132CADAB4ECEE9B7FA9DAAA9B8E98BD0F2DF7D32E9"
    "BA5C942A309A4CA1E819092383818B033DB823F214D6DBC054F464F6440F56F9FB83917384"
    "29CF77013349FE8699D7DED515E014D608B35C5583B54598D847DADE8179CEEF8EE6B9333C"
    "F19CBA7C6C86CC5893A8A844812E45C6674B1810D6A4C8574642CE3F19EAB053E8C7ECC51D"
    "36C2CE998E9D13CDCF59143B4B3D1C4FA20143CF843229558A3525AF8B399F9749D00C5484"
    "8716990BED104901128C968403D2493E2BE9C15181854C87D81465B85BB713417728095E56"
    "5989C9185C0FFE42AE2D85B73B4B720C940B90ADEEC61EA772CFA3655D466EE42DE4EC843B"
    "A7DEF02E013DC27C9E3D47120CBFFCC4965F159C4B9E0F83F37149F78CDFF829B876B505A4"
    "E34EB097C04932C0BEBF8CD59833CE178B670C4471FB058458A71";

T_MACHINE(CHAOS_MACHINE_XORRING64, xorring64__cerf__0, xorring64__cerf__1)
